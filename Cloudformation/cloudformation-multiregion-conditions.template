{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Example of Conditions and Logic in Cloudformation",
  "Parameters": {
    "VPCCIDR": {
      "Description": "CIDR Block for VPC",
      "Type": "String",
      "Default": "10.100.0.0/16",
      "AllowedValues": [
        "10.100.0.0/16"
      ]
    },
    "PublicSubnet1Param": {
      "Description": "Public Subnet 1",
      "Type": "String",
      "Default": "10.100.10.0/24",
      "AllowedValues": [
        "10.100.10.0/24"
      ]
    },
    "PublicSubnet2Param": {
      "Description": "Public Subnet 2",
      "Type": "String",
      "Default": "10.100.15.0/24",
      "AllowedValues": [
        "10.100.15.0/24"
      ]
    },
    "PrivateSubnet1Param": {
      "Description": "Private Subnet 1",
      "Type": "String",
      "Default": "10.100.50.0/24",
      "AllowedValues": [
        "10.100.50.0/24"
      ]
    },
    "PrivateSubnet2Param": {
      "Description": "Private Subnet 2",
      "Type": "String",
      "Default": "10.100.55.0/24",
      "AllowedValues": [
        "10.100.55.0/24"
      ]
    },
    "KeyName": {
      "Type": "String",
      "Description": "Keyname for the keypair to launch EC2 instances",
      "Default": "default-ec2-key"
    }
  },
  "Conditions": {
    "MyRegionGroupA": {
      "Fn::Or": [
        {
          "Fn::Equals": [
            {
              "Ref": "AWS::Region"
            },
            "us-east-1"
          ]
        },
        {
          "Fn::Equals": [
            {
              "Ref": "AWS::Region"
            },
            "us-west-1"
          ]
        },
        {
          "Fn::Equals": [
            {
              "Ref": "AWS::Region"
            },
            "us-west-2"
          ]
        },
        {
          "Fn::Equals": [
            {
              "Ref": "AWS::Region"
            },
            "sa-east-1"
          ]
        }
      ]
    },
    "MyRegionGroupB": {
      "Fn::Or": [
        {
          "Fn::Equals": [
            {
              "Ref": "AWS::Region"
            },
            "eu-west-1"
          ]
        },
        {
          "Fn::Equals": [
            {
              "Ref": "AWS::Region"
            },
            "eu-central-1"
          ]
        }
      ]
    },
    "MyRegionGroupC": {
      "Fn::Or": [
        {
          "Fn::Equals": [
            {
              "Ref": "AWS::Region"
            },
            "ap-northeast-1"
          ]
        },
        {
          "Fn::Equals": [
            {
              "Ref": "AWS::Region"
            },
            "ap-southeast-2"
          ]
        },
        {
          "Fn::Equals": [
            {
              "Ref": "AWS::Region"
            },
            "ap-southeast-1"
          ]
        }
      ]
    }
  },
  "Mappings": {
    "AmazonLinuxAMI": {
      "us-east-1": {
        "AMI": "ami-b66ed3de"
      },
      "us-west-1": {
        "AMI": "ami-4b6f650e"
      },
      "us-west-2": {
        "AMI": "ami-b5a7ea85"
      },
      "eu-west-1": {
        "AMI": "ami-6e7bd919"
      },
      "sa-east-1": {
        "AMI": "ami-8737829a"
      },
      "ap-southeast-1": {
        "AMI": "ami-ac5c7afe"
      },
      "ap-southeast-2": {
        "AMI": "ami-63f79559"
      },
      "ap-northeast-1": {
        "AMI": "ami-4985b048"
      }
    }
  },
  "Resources": {
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": {
          "Ref": "VPCCIDR"
        },
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "Tags": [
          {
            "Key": "VPC",
            "Value": "Example"
          },
          {
            "Key": "Name",
            "Value": "Example VPC"
          }
        ]
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "DependsOn": "VPC"
    },
    "AttachGateway": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "DependsOn": [
        "VPC",
        "InternetGateway"
      ],
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "PublicSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "DependsOn": "AttachGateway",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": {
          "Ref": "PublicSubnet1Param"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Public Subnet 1"
          }
        ]
      }
    },
    "PublicSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "DependsOn": "AttachGateway",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": {
          "Ref": "PublicSubnet2Param"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            "1",
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Public Subnet 2"
          }
        ]
      }
    },
    "PrivateSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "DependsOn": "AttachGateway",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": {
          "Ref": "PrivateSubnet1Param"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Private Subnet 1"
          }
        ]
      }
    },
    "PrivateSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "DependsOn": "AttachGateway",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": {
          "Ref": "PrivateSubnet2Param"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            "1",
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Private Subnet 2"
          }
        ]
      }
    },
    "PublicRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "DependsOn": [
        "VPC",
        "AttachGateway"
      ],
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Public"
          }
        ]
      }
    },
    "PublicRoute": {
      "Type": "AWS::EC2::Route",
      "DependsOn": [
        "PublicRouteTable",
        "AttachGateway"
      ],
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "PublicSubnet1RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "DependsOn": [
        "PublicRouteTable",
        "PublicSubnet1",
        "AttachGateway"
      ],
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnet1"
        },
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        }
      }
    },
    "PublicSubnet2RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "DependsOn": [
        "PublicRouteTable",
        "PublicSubnet2"
      ],
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnet2"
        },
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        }
      }
    },
    "PrivateRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "DependsOn": "AttachGateway",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Private"
          }
        ]
      }
    },
    "PrivateSubnet1RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "DependsOn": [
        "PublicRouteTable",
        "PrivateSubnet1",
        "AttachGateway"
      ],
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateSubnet1"
        },
        "RouteTableId": {
          "Ref": "PrivateRouteTable"
        }
      }
    },
    "PrivateSubnet2RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "DependsOn": [
        "PublicRouteTable",
        "PrivateSubnet2",
        "AttachGateway"
      ],
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateSubnet2"
        },
        "RouteTableId": {
          "Ref": "PrivateRouteTable"
        }
      }
    },
    "PrivateNetworkAcl": {
      "Type": "AWS::EC2::NetworkAcl",
      "DependsOn": "AttachGateway",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Network",
            "Value": "Private"
          }
        ]
      }
    },
    "NATInstance": {
      "Type": "AWS::EC2::Instance",
      "DependsOn": [
        "AttachGateway",
        "PublicRoute",
        "PublicSubnet1",
        "PublicSubnet2"
      ],
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "AmazonLinuxAMI",
            {
              "Ref": "AWS::Region"
            },
            "AMI"
          ]
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "InstanceType": "t2.small",
        "NetworkInterfaces": [
          {
            "DeviceIndex": "0",
            "AssociatePublicIpAddress": "true",
            "SubnetId": {
              "Ref": "PublicSubnet1"
            },
            "GroupSet": [
              {
                "Ref": "NATSecurityGroup"
              }
            ]
          }
        ],
        "SourceDestCheck": "false",
        "Tags": [
          {
            "Key": "Name",
            "Value": "NAT"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "\n",
              [
                "#!/bin/bash",
                "yum -y update",
                "echo 1 > /proc/sys/net/ipv4/ip_forward",
                "echo 0 > /proc/sys/net/ipv4/conf/eth0/send_redirects",
                "/sbin/iptables -t nat -A POSTROUTING -o eth0 -s 0.0.0.0/0 -j MASQUERADE",
                "/sbin/iptables-save > /etc/sysconfig/iptables",
                "mkdir -p /etc/sysctl.d/",
                "cat <<EOF > /etc/sysctl.d/nat.conf",
                "net.ipv4.ip_forward = 1",
                "net.ipv4.conf.eth0.send_redirects = 0",
                "EOF \n"
              ]
            ]
          }
        }
      }
    },
    "NATSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "DependsOn": "AttachGateway",
      "Properties": {
        "GroupDescription": "Enable internal access to the NAT device",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "0",
            "ToPort": "1024",
            "CidrIp": {
              "Ref": "PrivateSubnet1Param"
            }
          },
          {
            "IpProtocol": "udp",
            "FromPort": "0",
            "ToPort": "1024",
            "CidrIp": {
              "Ref": "PrivateSubnet1Param"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "0",
            "ToPort": "1024",
            "CidrIp": {
              "Ref": "PrivateSubnet2Param"
            }
          },
          {
            "IpProtocol": "udp",
            "FromPort": "0",
            "ToPort": "1024",
            "CidrIp": {
              "Ref": "PrivateSubnet2Param"
            }
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "0",
            "ToPort": "65535",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "udp",
            "FromPort": "0",
            "ToPort": "65535",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "PrivateRoute": {
      "Type": "AWS::EC2::Route",
      "DependsOn": [
        "NATInstance",
        "PrivateRouteTable"
      ],
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "InstanceId": {
          "Ref": "NATInstance"
        }
      }
    },
    "WA1SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "DependsOn": "AttachGateway",
      "Properties": {
        "GroupDescription": "Security Group for Web Application 1",
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "ExampleSecurityGroup"
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "0",
            "ToPort": "65535",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "udp",
            "FromPort": "0",
            "ToPort": "65535",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "RootRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "*",
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "RootInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "DependsOn": "RootRole",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "RootRole"
          }
        ]
      }
    },
    "WaitHandle01": {
      "Type": "AWS::CloudFormation::WaitConditionHandle",
      "Properties": {}
    },
    "WaitCondition01": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "DependsOn": "WebApp1",
      "Properties": {
        "Handle": {
          "Ref": "WaitHandle01"
        },
        "Timeout": "1800"
      }
    },
    "WebApp1": {
      "Type": "AWS::EC2::Instance",
      "DependsOn": [
        "NATInstance",
        "WA1SecurityGroup"
      ],
      "Properties": {
        "KeyName": {
          "Ref": "KeyName"
        },
        "IamInstanceProfile": {
          "Ref": "RootInstanceProfile"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "AmazonLinuxAMI",
            {
              "Ref": "AWS::Region"
            },
            "AMI"
          ]
        },
        "InstanceType": "t2.medium",
        "NetworkInterfaces": [
          {
            "DeviceIndex": "0",
            "AssociatePublicIpAddress": "true",
            "SubnetId": {
              "Ref": "PublicSubnet2"
            },
            "GroupSet": [
              {
                "Ref": "WA1SecurityGroup"
              }
            ]
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "Web Application 1"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -ex \n",
                "yum -y update \n",
                "yum -y install httpd php\n",
                "chkconfig httpd on\n",
                "echo \"<?php phpinfo(); ?>\" > /var/www/html/info.php\n",
                "service httpd start\n",
                "aws cloudformation create-stack --region ",
                {
                  "Fn::If": [
                    "MyRegionGroupA",
                    "eu-west-1",
                    {
                      "Fn::If": [
                        "MyRegionGroupB",
                        "us-east-1",
                        {
                          "Fn::If": [
                            "MyRegionGroupC",
                            "us-west-1",
                            "us-west-2"
                          ]
                        }
                      ]
                    }
                  ]
                },
                " --stack-name SecondaryRegionLaunch --template-url https://BUCKETNAME.s3.amazonaws.com/PREFIXTOTEMPLATE/secondary-region.template  --parameters ParameterKey=KeyName,ParameterValue=",
                {
                  "Ref": "KeyName"
                },
                " \n",
                "/opt/aws/bin/cfn-signal -s true '",
                {
                  "Ref": "WaitHandle01"
                },
                "'\n"
              ]
            ]
          }
        }
      }
    }
  }
}
